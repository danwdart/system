# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

let
  netboot = import (pkgs.path + "/nixos/lib/eval-config.nix") {
    modules = [
      (pkgs.path + "/nixos/modules/installer/netboot/netboot-minimal.nix")
      {
        # you will want to add options here to support your filesystem
        # and also maybe ssh to let you in
        # boot.supportedFilesystems = [ "zfs" ];
        boot.kernelModules = [ "kvm-intel" ];
        system.stateVersion = "24.11";
      }
    ];
  };
in {
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "uas" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" "ax25" "mkiss" "netrom" ];
  boot.extraModulePackages = [ ];
  
  boot.loader.systemd-boot.enable = true;
  boot.loader.systemd-boot.xbootldrMountPoint = "/boot";
  # boot.loader.systemd-boot.extraEntries = {
  #   "nixos-installer.conf" = ''
  #     title NixOS Installer
  #     version 24.11
  #     linux ($drive1)/rescue-kernel init=${netboot.config.system.build.toplevel}/init ${toString netboot.config.boot.kernelParams}
  #     initrd ($drive1)/rescue-initrd
  #     options i915.enable_gvt=1
  #   '';
  # };
  # boot.loader.systemd-boot.extraFiles = {
  #   "rescue-kernel" = "${netboot.config.system.build.kernel}/bzImage";
  #   "rescue-initrd" = "${netboot.config.system.build.netbootRamdisk}/initrd";
  # };
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.efi.efiSysMountPoint = "/efi";

  # fileSystems."/" = lib.mkDefault
  #   { device = "/dev/disk/by-uuid/1778de2b-8859-4988-9fed-cbd53b8fb7cf";
  #     fsType = "ext4";
  #     options = [ "noatime" ];
  #   };

  # fileSystems."/" = {
  #   device = "tmpfs";
  #   fsType = "tmpfs";
  #   options = [
  #     "size=16G"
  #   ];
  # };

  fileSystems."/" =
  { device = "/dev/disk/by-uuid/b059e259-ff09-4abd-a8d2-7c009727977c";
    fsType = "ext4";
    neededForBoot = true;
    options = [ "noatime" ];
  };

  fileSystems."/efi" =
    { device = "/dev/disk/by-uuid/56AE-FA62";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/04D6-0D2D";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];
  
  zramSwap = {
    enable = true;
    algorithm = "zstd";
    # numDevices = 1; # Using ZRAM devices as general purpose ephemeral block devices is no longer supported
    swapDevices = 1;
    memoryPercent = 50;
  };

  hardware.nvidia = {
    # Modesetting is required.
    modesetting.enable = true;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    # Enable this if you have graphical corruption issues or application crashes after waking
    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead 
    # of just the bare essentials.
    powerManagement.enable = false;

    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of 
    # supported GPUs is at: 
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
    # Only available from driver 515.43.04+
    # Currently alpha-quality/buggy, so false is currently the recommended setting.
    open = false;

    # Enable the Nvidia settings menu,
    # accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.production; # beta

    # dynamicBoost.enable = true; # only on 20xx SUPER +

    prime = { 
      intelBusId = "PCI:0:2:0";
      nvidiaBusId = "PCI:1:0:0";
      offload = {
        enable = false;
      #   enableOffloadCmd = true;
      };
      sync.enable = true;
    };
  };

  # wat
  # boot.kernelParams = [ "module_blacklist=i915" ];

  specialisation.rescue.configuration = {
    boot.kernelParams = [ "rescue" ];
  };

  specialisation.emergency.configuration = {
    boot.kernelParams = [ "emergency" ];
  };

  # pretty sure this doesn't work with non-sqfs stuffs
  # specialisation.copytoram.configuration = {
  #   boot.kernelParams = [ "copytoram" ];
  # };

  # specialisation.iso.configuration = {
  #   boot.kernelParams = [
  #     "img_dev=/dev/disk/by-uuid/b059e259-ff09-4abd-a8d2-7c009727977c"
  #     "img_loop=/nix/store/bypmlcxd9drl57pjykrar95r6raprk6a-nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso/iso/nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso"
  #   ];
  # };
# 
  # specialisation.isofind.configuration = {
  #   boot.kernelParams = [
  #     "img_dev=/dev/disk/by-uuid/b059e259-ff09-4abd-a8d2-7c009727977c"
  #     "findiso=/nix/store/bypmlcxd9drl57pjykrar95r6raprk6a-nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso/iso/nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso"
  #     "img_loop=/nix/store/bypmlcxd9drl57pjykrar95r6raprk6a-nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso/iso/nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso"
  #   ];
  # };
# 
  # specialisation.isoram.configuration = {
  #   boot.kernelParams = [
  #     "img_dev=/dev/disk/by-uuid/b059e259-ff09-4abd-a8d2-7c009727977c"
  #     "img_loop=/nix/store/bypmlcxd9drl57pjykrar95r6raprk6a-nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso/iso/nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso"
  #     "copytoram"
  #   ];
  # };
# 
  # specialisation.isoramfind.configuration = {
  #   boot.kernelParams = [
  #     "img_dev=/dev/disk/by-uuid/b059e259-ff09-4abd-a8d2-7c009727977c"
  #     "findiso=/nix/store/bypmlcxd9drl57pjykrar95r6raprk6a-nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso/iso/nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso"
  #     "img_loop=/nix/store/bypmlcxd9drl57pjykrar95r6raprk6a-nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso/iso/nixos-25.05beta714768.ac35b104800b-x86_64-linux.iso"
  #     "copytoram"
  #   ];
  # };

  # specialisation.iommu.configuration = {
  #   hardware.graphics.enable = true;
  #   virtualisation.spiceUSBRedirection.enable = true;
  #   boot = {
  #     kernelParams = [
  #       "intel_iommu=on"
  #       "kvm.ignore_msrs=1"
  #     ] ++ (let gpuIDs = [
  #           "10de:1f99" # video
  #           "10de:10fa" # audio
  #         ];
  #       in [("vfio-pci.ids=" + lib.concatStringsSep "," gpuIDs)]);
  #     initrd.kernelModules = [
  #       "vfio_pci"
  #       "vfio"
  #       "vfio_iommu_type1"
  #       # "vfio_virqfd"
# 
  #       "nvidia"
  #       "nvidia_modeset"
  #       "nvidia_uvm"
  #       "nvidia_drm"
  #     ];
  #   };
  # };

  services.xserver.videoDrivers = ["nvidia" "modesetting"];

  # environment.persistence."/persist" = {
  #   hideMounts = true;
  #   directories = [
  #     "/etc/ax25"
  #     "/etc/ssh"
  #     "/etc/NetworkManager"
  #     "/etc/secureboot"
  #     "/var/lib"
  #     "/root/.cache/nix" # for when rebuilding the system
  #     "/nix"
  #     "/tmp" # temporarily on
  #   ];
  #   files = [
  #     "/etc/machine-id"
  #     # "/root/.nix-channels" # keeps dying
  #   ];
  #   users = {
  #     dwd = { # todo imports = [ /path/to/impermanence/home-manager.nix ]; & move to home.persistence."/persist/home/dwd" on flag
  #       directories = [
  #         "code"
  #         "Desktop"
  #         "Documents"
  #         "Downloads"
  #         "from"
  #         "games"
  #         "Music"
  #         "Pictures"
  #         "qsstv"
  #         "radioimages"
  #         "Templates" # Really? I don't even use that. But should I? There's no harm...
  #         "Videos"
  #         "VMs"
  #         ".android"
  #         ".armagetronad"
  #         ".cache/nix" # Stop having to keep redownloading tarballs and search indices
  #         ".cache/spotify" # Keep me logged in
  #         ".config/autostart"
  #         ".config/cachix"
  #         ".config/calibre"
  #         ".config/Code/Backups" # Unsaved open files and workspaces
  #         ".config/discord"
  #         ".config/doctl"
  #         ".config/dolphin-emu"
  #         ".config/Element"
  #         ".config/gh"
  #         ".config/Gpredict"
  #         ".config/htop"
  #         ".config/Insomnia"
  #         ".config/kdeconnect"
  #         ".config/Microsoft/Microsoft Teams"
  #         ".config/nethack"
  #         ".config/Nextcloud"
  #         ".config/ON4QZ" # qsstv
  #         ".config/PCSX2"
  #         # ".config/Postman"
  #         ".config/rclone"
  #         ".config/spotify" # cache as well?
  #         ".config/Slack"
  #         # ".config/VirtualBox" # TODO move?
  #         ".dosbox"
  #         ".fldigi"
  #         ".flrig"
  #         ".frozen-bubble"
  #         ".ghc"
  #         { directory = ".gnupg"; mode = "0700"; }
  #         ".googleearth"
  #         # ".kde"
  #         ".lgames"
  #         ".local/share/Baba_Is_You"
  #         ".local/share/citra-emu"
  #         ".local/share/DBeaverData"
  #         ".local/share/direnv"
  #         ".local/share/dolphin-emu"
  #         ".local/share/ktorrent"
  #         ".local/share/kwalletd"
  #         ".local/share/networkmanagement"
  #         ".local/share/Steam"
  #         ".local/share/WSJT-X"
  #         ".mozilla"
  #         # ".ngrok2"
  #         ".pcsxr"
  #         ".quakespasm"
  #         ".serverless"
  #         { directory = ".ssh"; mode = "0700"; }
  #         ".steam" # TODO copy/link, don't mount
  #         ".thunderbird"
  #         ".tor project"
  #         # ".vagrant.d" # TODO relocate
  #         ".vkquake"
  #         ".wine"
  #         ".xastir"
  #         # ".yq2"
  #       ];
  #       files = [
  #         ".bash_history"
  #         ".config/Code/storage.json" # Open files and workspaces
  #         ".config/Code/User/globalStorage/state.vscdb" # Current state
  #         ".config/dolphinrc"
  #         ".config/kdeglobals"
  #         ".config/ktorrentrc"
  #         ".config/mimeapps.list"
  #         ".config/plasma-org.kde.plasma.desktop-appletsrc"
  #         ".config/plasmarc"
  #         ".config/plasmashellrc"
  #         ".config/powerdevilrc"
  #         ".config/powermanagementprofilesrc"
  #         ".config/WSJT-X.ini"
  #         ".local/share/user-places.xbel"
  #         ".nix-channels"
  #         ".serverlessrc"
  #         "direwolf.conf"
  #       ];
  #     };
  #     raven = {
  #       directories = [
  #         "."
  #       ];
  #     };
  #   };
  # };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
